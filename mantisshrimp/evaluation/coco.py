# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/11_evaluation.coco.ipynb (unless otherwise specified).

__all__ = ['records2coco', 'coco_api_from_records', 'COCOEvaluator']

# Cell
from ..imports import *
from ..core import *
from ..models import *
from .coco_eval import CocoEvaluator
from pycocotools.coco import COCO

# Cell
def records2coco(records, id2cat):
    cats = [{'id':k, 'name':v} for k,v in id2cat.items()]
    annots = defaultdict(list)
    iinfos = []
    i = 0
    for r in tqdm(records):
        iinfos.append({
            'id': r.iinfo.iid,
            'file_name': r.iinfo.fp.name,
            'width': r.iinfo.w,
            'height': r.iinfo.h,
        })
        for annot in r.annot:
            annots['id'].append(i) # TODO: Careful with ids! when over all dataset
            annots['image_id'].append(r.iinfo.iid)
            annots['category_id'].append(annot.oid)
            annots['bbox'].append(annot.bbox.xywh)
            annots['area'].append(annot.bbox.area)
            # TODO: for other types of masks
            if notnone(annot.seg): annots['segmentation'].extend(annot.seg.to_erle(r.iinfo.h, r.iinfo.w))
            annots['iscrowd'].append(annot.iscrowd)
            # TODO: Keypoints
            i += 1
    assert allequal(lmap(len, annots.values())), 'Mismatch lenght of elements'
    annots = [{k:v[i] for k,v in annots.items()} for i in range_of(annots['id'])]
    return {'images': iinfos, 'annotations': annots, 'categories': cats}

# Cell
def coco_api_from_records(records, id2cat):
    coco_ds = COCO()
    coco_ds.dataset = records2coco(records, id2cat)
    coco_ds.createIndex()
    return coco_ds

# Cell
def _get_iou_types(model):
    model_without_ddp = model
    if isinstance(model, torch.nn.parallel.DistributedDataParallel):
        model_without_ddp = model.module
    iou_types = ["bbox"]
    if isinstance(model_without_ddp, MaskRCNNModel):
        iou_types.append("segm")
    if isinstance(model_without_ddp, torchvision.models.detection.KeypointRCNN):
        raise NotImplementedError
#         iou_types.append("keypoints")
    return iou_types

# Cell
def COCOEvaluator(model, coco_ds):
    return CocoEvaluator(coco_ds, _get_iou_types(model))